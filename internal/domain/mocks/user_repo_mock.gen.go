// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PoorMercymain/user-segmenter/internal/domain (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateDeletionTime mocks base method.
func (m *MockUserRepository) CreateDeletionTime(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeletionTime", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDeletionTime indicates an expected call of CreateDeletionTime.
func (mr *MockUserRepositoryMockRecorder) CreateDeletionTime(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeletionTime", reflect.TypeOf((*MockUserRepository)(nil).CreateDeletionTime), arg0, arg1, arg2, arg3)
}

// ReadUserSegments mocks base method.
func (m *MockUserRepository) ReadUserSegments(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserSegments", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserSegments indicates an expected call of ReadUserSegments.
func (mr *MockUserRepositoryMockRecorder) ReadUserSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserSegments", reflect.TypeOf((*MockUserRepository)(nil).ReadUserSegments), arg0, arg1)
}

// UpdateUserSegments mocks base method.
func (m *MockUserRepository) UpdateUserSegments(arg0 context.Context, arg1 string, arg2, arg3 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSegments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSegments indicates an expected call of UpdateUserSegments.
func (mr *MockUserRepositoryMockRecorder) UpdateUserSegments(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSegments", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserSegments), arg0, arg1, arg2, arg3)
}
